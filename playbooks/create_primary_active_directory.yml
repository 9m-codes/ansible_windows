---
- name: Create Windows Active Directory Domain
  hosts: windows-server-01
  gather_facts: no
  connection: winrm

  # Make sure these collections are installed on your Ansible control node.
  # Run the following commands:
  # ansible-galaxy collection install ansible.windows
  # ansible-galaxy collection install microsoft.ad
  collections:
    - ansible.windows
    - microsoft.ad

  vars:
    # Use the inventory variable for the initial connection user
    ansible_user: "{{ ansible_primary_username }}"
    # The domain name to be created
    ad_domain_name: ad.jeeex.org
    # The NetBIOS name (e.g., AD for ad.jeeex.org)
    ad_netbios_name: jeeex
    # DNS settings for the domain controller. It will point to itself.
    ad_dns_server: "127.0.0.1"

  tasks:
    - name: Load the vault file with the AD password
      include_vars:
        file: ../.secrets/ad_domain_vault.yml
        name: ad_vault
      # Before running this playbook, you must create an encrypted vault file.
      # Run the following command on your control node:
      # ansible-vault create .secrets/ad_domain_vault.yml --vault-password-file .secrets/.vault_pass
      # The file should contain the following variable:
      # vault_ad_safe_mode_password: "YourStrongPasswordHere!"

    - name: Load the vault file for the primary service account password
      include_vars:
        file: ../.secrets/primary_vault.yml
        name: primary_cred
      # This vault file must also be created before running the playbook.
      # Run the following command:
      # ansible-vault create .secrets/primary_vault.yml --vault-password-file .secrets/.vault_pass
      # The file should contain the following variable:
      # vault_windows_password: "YourPrimaryWindowsPasswordHere!"

    - name: Set connection password for the primary service account
      set_fact:
        ansible_password: "{{ primary_cred.vault_windows_password }}"
      # This task uses the password from the vault file loaded above.

    - name: Ping the target host to verify connectivity
      ansible.windows.win_ping:

    - name: Install Active Directory Domain Services feature
      ansible.windows.win_feature:
        name: AD-Domain-Services
        state: present
        include_management_tools: yes
      register: ad_feature_install

    - name: Reboot if required for feature installation
      ansible.windows.win_reboot:
      when: ad_feature_install.reboot_required

    - name: Promote the server to a domain controller
      microsoft.ad.domain:
        # NOTE: The 'state' parameter is not supported by this module.
        # It handles creation by simply providing the required parameters.
        # 'Win2016' is not a valid value. Using 'WinThreshold' as suggested by the error message.
        domain_mode: WinThreshold
        forest_mode: WinThreshold
        dns_domain_name: "{{ ad_domain_name }}"
        safe_mode_password: "{{ ad_vault.vault_ad_safe_mode_password }}"
        domain_netbios_name: "{{ ad_netbios_name }}"
      register: domain_promote
      # This module will handle the server reboot automatically.
      # The playbook will pause until the server is back online.

    - name: Wait for server to become accessible again after domain promotion
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 60
      # This task is important as the promotion process reboots the server.

    - name: Set DNS to point to itself
      ansible.windows.win_dns_client:
        adapter_names: '*'
        dns_servers:
          - "{{ ad_dns_server }}"
      when: not domain_promote.failed

    - name: Display new domain status
      ansible.windows.win_whoami:
      when: not domain_promote.failed
